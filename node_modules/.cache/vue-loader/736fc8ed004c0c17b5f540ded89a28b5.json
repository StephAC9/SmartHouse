{"remainingRequest":"/Users/macbookpro/Desktop/SmartHouseAPP/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macbookpro/Desktop/SmartHouseAPP/src/components/Rooms.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/macbookpro/Desktop/SmartHouseAPP/src/components/Rooms.vue","mtime":1573511594000},{"path":"/Users/macbookpro/Desktop/SmartHouseAPP/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/Users/macbookpro/Desktop/SmartHouseAPP/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/Desktop/SmartHouseAPP/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport DeleteNotice from './DeleteNotice'\nimport AddRoom from './AddRoom'\nimport RoomItem from './RoomItem'\nimport {createNamespacedHelpers} from 'vuex'\nconst {mapGetters} = createNamespacedHelpers('users')\nimport {\n    mdiDelete,\n  } from '@mdi/js'\nexport default {\n    name:'Rooms',\n\n    components:{\n        AddRoom,\n        RoomItem,\n        DeleteNotice\n    },\n\n    data(){\n        return{\n            dialog: false,\n            roomId:'',\n\n            icons: {\n                mdiDelete,\n            }\n        }\n    },\n\n    computed:{\n         ...mapGetters(['rooms']),\n         ...mapGetters(['user'])\n    },\n\n     created () {\n      this.$vuetify.theme.dark = false\n      if (this.user.id !== null || this.user.id !== undefined)\n            this.$store.dispatch('users/fetchRooms',{id: this.user.id})\n            console.log(this.user)\n    },\n\n    methods:{\n        showDeleteDialog(roomId){ \n            this.roomId = roomId\n            this.dialog = true\n        },\n\n        deleteRoom(){\n            this.dialog = false\n            this.$store.dispatch('users/deleteRoom',{roomId: this.roomId, userId: this.user.id}) // Remove room from the database\n            this.$store.dispatch('users/fetchRooms',{id: this.user.id}) // reload state of room sothat you have new state without the room that have been removed\n        }\n    }\n    \n}\n",{"version":3,"sources":["Rooms.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"Rooms.vue","sourceRoot":"src/components","sourcesContent":["<template>\n <div class=\"main-container-rooms\">\n    <div>\n      <h2><strong>AVAILABLE ROOMS</strong></h2>\n    </div>\n\n    <div>\n        <AddRoom ></AddRoom>\n    </div>\n    <!-- <div>\n\n        <DeleteNotice v-model=\"dialog\"></DeleteNotice>\n    </div> -->\n\n    <v-dialog v-model=\"dialog\" persistent max-width=\"290\">\n        <v-card>\n            <v-card-title class=\"headline\">DELETION NOTICE</v-card-title>\n            <v-card-text>This room with all the devices in it will be completely removed <span style=\"font-size:25px; color:red;font-style:bold\">!!!</span></v-card-text>\n            <v-card-actions>\n            <div class=\"flex-grow-1\"></div>\n            <v-btn color=\"grey darken-1\" text @click=\"dialog = false\">Cancel</v-btn>\n            <v-btn color=\"red darken-1\" text @click=\"deleteRoom\">Delete</v-btn>\n            </v-card-actions>\n        </v-card>\n        </v-dialog>\n\n        <RoomItem v-bind:rooms=\"rooms\" @showDeleteDialog=\"showDeleteDialog\"></RoomItem>\n</div>\n</template>\n\n<script>\nimport DeleteNotice from './DeleteNotice'\nimport AddRoom from './AddRoom'\nimport RoomItem from './RoomItem'\nimport {createNamespacedHelpers} from 'vuex'\nconst {mapGetters} = createNamespacedHelpers('users')\nimport {\n    mdiDelete,\n  } from '@mdi/js'\nexport default {\n    name:'Rooms',\n\n    components:{\n        AddRoom,\n        RoomItem,\n        DeleteNotice\n    },\n\n    data(){\n        return{\n            dialog: false,\n            roomId:'',\n\n            icons: {\n                mdiDelete,\n            }\n        }\n    },\n\n    computed:{\n         ...mapGetters(['rooms']),\n         ...mapGetters(['user'])\n    },\n\n     created () {\n      this.$vuetify.theme.dark = false\n      if (this.user.id !== null || this.user.id !== undefined)\n            this.$store.dispatch('users/fetchRooms',{id: this.user.id})\n            console.log(this.user)\n    },\n\n    methods:{\n        showDeleteDialog(roomId){ \n            this.roomId = roomId\n            this.dialog = true\n        },\n\n        deleteRoom(){\n            this.dialog = false\n            this.$store.dispatch('users/deleteRoom',{roomId: this.roomId, userId: this.user.id}) // Remove room from the database\n            this.$store.dispatch('users/fetchRooms',{id: this.user.id}) // reload state of room sothat you have new state without the room that have been removed\n        }\n    }\n    \n}\n</script>\n\n<style scoped>\n\n\n  .main-container-rooms{\n      text-align: center;\n      display: flex;\n      flex-direction:column;\n      border-radius: 10px;\n      background: rgb(114, 114, 112);\n      padding: 10px;\n      justify-content: space-between;\n      flex-wrap:wrap;\n  }\n\n</style>"]}]}